import { NextRequest, NextResponse } from 'next/server'
import { reportOperations, userOperations, newsOperations } from '../../../../lib/database'
import { fetchNews, processNews } from '../../../../lib/newsFetcher.js'
import { fetchStockPrice, validatePriceData } from '../../../../lib/priceFetcher.js'
import jsPDF from 'jspdf'

interface GenerateReportRequest {
  user_id: string
  ticker: string
}

export async function POST(request: NextRequest) {
  try {
    const body: GenerateReportRequest = await request.json()
    const { user_id, ticker } = body

    // Validate input
    if (!user_id || !ticker) {
      return NextResponse.json(
        { error: 'Missing required fields: user_id and ticker' },
        { status: 400 }
      )
    }

    // Validate that user exists (optional check)
    // Note: In a real app, you'd also verify user authentication
    console.log(`Generating report for user: ${user_id}, ticker: ${ticker}`)

    // Create initial report record with "queued" status
    const report = await reportOperations.createReport(user_id, ticker)
    
    if (!report) {
      return NextResponse.json(
        { error: 'Failed to create report record' },
        { status: 500 }
      )
    }

    // Update status to "running"
    await reportOperations.updateReportStatus(report.id, 'running')

    try {
      // Fetch news for the ticker
      console.log(`\n=== FETCHING NEWS FOR ${ticker} ===`)
      const newsArticles = await fetchNews(ticker)
      console.log('Raw news articles:', JSON.stringify(newsArticles, null, 2))
      
      // Process the news articles
      const processedNews = processNews(newsArticles, ticker)
      console.log('Processed news articles:', JSON.stringify(processedNews, null, 2))
      console.log(`=== NEWS FETCH COMPLETED: ${processedNews.length} articles processed ===\n`)
      
      // Insert news articles into database
      console.log('=== INSERTING NEWS INTO DATABASE ===')
      let insertedCount = 0
      let skippedCount = 0
      
      for (const article of processedNews) {
        try {
          // Prepare news item for insertion (convert to NewsItemInsert format)
          const newsItem = {
            ticker: article.ticker,
            headline: article.headline,
            summary: article.summary,
            published_at: article.published_at,
            url: article.url,
            fingerprint: article.fingerprint
          }
          
          const insertedArticle = await newsOperations.addNewsItem(newsItem)
          
          if (insertedArticle) {
            insertedCount++
            console.log(`✓ Inserted: ${article.headline.substring(0, 50)}...`)
          } else {
            skippedCount++
            console.log(`⚠ Skipped (duplicate): ${article.headline.substring(0, 50)}...`)
          }
        } catch (insertError: any) {
          // Check if it's a duplicate fingerprint error
          if (insertError?.code === '23505' || insertError?.message?.includes('duplicate') || insertError?.message?.includes('unique')) {
            skippedCount++
            console.log(`⚠ Skipped (duplicate fingerprint): ${article.headline.substring(0, 50)}...`)
          } else {
            console.error(`❌ Error inserting article: ${article.headline.substring(0, 50)}...`, insertError)
            // Continue processing other articles even if one fails
          }
        }
      }
      
      console.log(`=== NEWS INSERTION COMPLETED: ${insertedCount} inserted, ${skippedCount} skipped ===\n`)
      
      // Fetch stock price data
      console.log(`=== FETCHING STOCK PRICE FOR ${ticker} ===`)
      const priceData: any = await fetchStockPrice(ticker)
      console.log('Price data:', JSON.stringify(priceData, null, 2))
      
      // Validate price data
      const isPriceDataValid = validatePriceData(priceData)
      console.log(`Price data validation: ${isPriceDataValid ? 'VALID' : 'INVALID'}`)
      console.log(`=== PRICE FETCH COMPLETED ===\n`)
      // Generate "Hello World" PDF with news integration
      const pdf = new jsPDF()
      
      // Add title
      pdf.setFontSize(20)
      pdf.text('Stock Report', 20, 30)
      
      // Add ticker info
      pdf.setFontSize(16)
      pdf.text(`Ticker: ${ticker}`, 20, 50)
      
      // Add price information
      if (priceData && isPriceDataValid) {
        pdf.setFontSize(12)
        pdf.text(`Current Price: ${priceData.currency} ${priceData.last_traded_price}`, 20, 65)
        pdf.text(`Change: ${priceData.change_abs} (${priceData.change_pct})`, 20, 80)
        pdf.text(`Source: ${priceData.source}`, 20, 95)
      }
      
      // Add hello world content
      pdf.setFontSize(12)
      pdf.text('Hello, World!', 20, 110)
      pdf.text('This is a placeholder stock report with news and price integration.', 20, 125)
      pdf.text('Generated by Stock Report Engine', 20, 140)
      
      // Add timestamp
      pdf.text(`Generated at: ${new Date().toISOString()}`, 20, 160)
      pdf.text(`Report ID: ${report.id}`, 20, 175)
      
      // Add news summary
      pdf.text(`News Articles Found: ${processedNews.length}`, 20, 195)
      pdf.text(`Articles Saved to DB: ${insertedCount}, Skipped: ${skippedCount}`, 20, 210)
      
      // Add some sample content
      pdf.text('Sample Analysis:', 20, 230)
      pdf.text('• Company fundamentals look strong', 30, 245)
      pdf.text('• Market conditions are favorable', 30, 260)
      pdf.text('• Technical indicators suggest growth', 30, 275)
      
      // Add recent news headlines (first 2)
      if (processedNews.length > 0) {
        pdf.text('Recent News:', 20, 295)
        processedNews.slice(0, 2).forEach((article, index) => {
          const yPos = 310 + (index * 25)
          pdf.setFontSize(10)
          // Truncate long headlines
          const headline = article.headline.length > 60 
            ? article.headline.substring(0, 60) + '...'
            : article.headline
          pdf.text(`• ${headline}`, 25, yPos)
          pdf.text(`  Source: ${article.source} | ${new Date(article.published_at).toLocaleDateString()}`, 25, yPos + 10)
        })
      }
      
      // Convert PDF to base64 data URL
      const pdfOutput = pdf.output('datauristring')
      
      // For now, we'll store a dummy URL since we're not implementing file storage yet
      // In a real implementation, you'd upload this to Supabase Storage or AWS S3
      const dummyPdfUrl = `dummy_${report.id}.pdf`
      
      // Update report status to "done" with PDF URL
      const updatedReport = await reportOperations.updateReportStatus(
        report.id, 
        'done', 
        dummyPdfUrl
      )

      if (!updatedReport) {
        throw new Error('Failed to update report status')
      }

      return NextResponse.json({
        report_id: report.id,
        status: 'done',
        pdf_url: dummyPdfUrl,
        message: 'Report generated successfully',
        ticker: ticker,
        generated_at: updatedReport.generated_at,
        news_stats: {
          articles_found: processedNews.length,
          articles_inserted: insertedCount,
          articles_skipped: skippedCount
        },
        price_data: priceData
      })

    } catch (pdfError) {
      console.error('PDF generation error:', pdfError)
      
      // Update report status to "failed"
      await reportOperations.updateReportStatus(report.id, 'failed')
      
      return NextResponse.json(
        { 
          error: 'PDF generation failed',
          report_id: report.id,
          status: 'failed'
        },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('Report generation error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}